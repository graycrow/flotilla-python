#!/bin/bash

: <<'DISCLAIMER'

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

This script is licensed under the terms of the MIT license.
Unless otherwise noted, code reproduced herein
was written for this script.

- The Pimoroni Crew -

DISCLAIMER

scriptname="install"

confirm() {
    if [ "$FORCE" == '-y' ]; then
        true
    else
        read -r -p "$1 [y/N] " response < /dev/tty
        if [[ $response =~ ^(yes|y)$ ]]; then
            true
        else
            false
        fi
    fi
}

success() {
    echo "$(tput setaf 2)$1$(tput sgr0)"
}

warning() {
    echo "$(tput setaf 1)$1$(tput sgr0)"
}

newline() {
    echo ""
}

sudocheck() {
    if [ $(id -u) -ne 0 ]; then
        echo -e "Install must be run as root. Try 'sudo ./$scriptname'\n"
        exit
    fi
}

apt_pkg_req() {
    APT_CHK=$(dpkg-query -W -f='${Status}\n' $1 2> /dev/null | grep "install ok installed")

    if [ "" == "$APT_CHK" ]; then
        true
    else
        false
    fi
}

apt_pkg_install() {
    \curl -sS get.pimoroni.com/package | bash -s - $1 || { warning "Sorry, Apt failed to install $1, I can't continue!" && exit; }
}

pip_pkg_req() {
    PIP_CHK=$(pip search $1 | grep INSTALLED)

    if [ "" == "$PIP_CHK" ]; then
        true
    else
        false
    fi
}

pip_chk_pip3() {
    if command -v pip3 > /dev/null; then
        PIP3_BIN="pip3"
    elif command -v pip-3.2 > /dev/null; then
        PIP3_BIN="pip-3.2"
    else
        PIP3_BIN=""
    fi
}

pip_pkg_req3() {
    PIP_CHK=$($PIP3_BIN search $1 | grep INSTALLED)

    if [ "" == "$PIP_CHK" ]; then
        true
    else
        false
    fi
}

os_check() {
    IS_RASPBIAN=false
    IS_MACOSX=false
    IS_X86_64=false
    IS_X86_32=false

    if [ -f /etc/os-release ] && cat /etc/os-release | grep "Raspbian" > /dev/null; then
        IS_RASPBIAN=true
    elif uname -s | grep "Darwin" > /dev/null; then
        IS_MACOSX=true
    elif uname -m | grep "x86_64" > /dev/null; then
        IS_X86_64=true
    else
        IS_X86_32=true
    fi
}

: <<'MAINSTART'

Perform all global variables declarations as well as function definition
above this section for clarity, thanks!

MAINSTART

os_check
sudocheck
pip_chk_pip3

if command -v apt-get > /dev/null; then
    echo -e "Updating apt database...\n"
    sudo apt-get update
    newline
    echo -e "Uninstalling pyserial from apt repository...\n"
    sudo apt-get remove python-serial python3-serial
    newline
    echo -e "Installing pip if required...\n"
    sudo apt-get install python-pip python3-pip
fi

if command -v pip > /dev/null; then
    echo -e "Installing pyserial from pip repository...\n"
    sudo pip install pyserial
fi
if [ -n "$PIP3_BIN" ]; then
    sudo $PIP3_BIN install pyserial
fi

echo -e "Installing flotilla library...\n"
cd ./library
sudo python ./setup.py install

if [ -n "$PIP3_BIN" ]; then
    sudo python3 ./setup.py install
fi

newline
echo -e "We will now check that your dock is running the latest firmware\n"
cd ../firmware
sudo ./update_firmware

echo -e "All done! Time to set sail.\n"

exit 0
