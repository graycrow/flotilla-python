#!/bin/bash

: <<'DISCLAIMER'

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

This script is licensed under the terms of the MIT license.
Unless otherwise noted, code reproduced herein
was written for this script.

- The Pimoroni Crew -

DISCLAIMER

productname="flotilla python API" # the name of the product to install
scriptname="install" # the name of this script
piplibname="flotilla" # the name of the lib to install
pip2support="yes" # whether python2 is supported or not
pip3support="yes" # whether python3 is supported or not
piplibdep=( "pyserial" ) # dependencies of lib
pkgaptremove=( "python-serial" "python3-serial" )
pkgdeplist7=( "python-pip" "python3-pip" )
pkgdeplist8=( "python-gpiozero" "python3-gpiozero" )

confirm() {
    if [ "$FORCE" == '-y' ]; then
        true
    else
        read -r -p "$1 [y/N] " response < /dev/tty
        if [[ $response =~ ^(yes|y)$ ]]; then
            true
        else
            false
        fi
    fi
}

success() {
    echo "$(tput setaf 2)$1$(tput sgr0)"
}

warning() {
    echo "$(tput setaf 1)$1$(tput sgr0)"
}

newline() {
    echo ""
}

sudocheck() {
    if [ $(id -u) -ne 0 ]; then
        echo "Install must be run as root. Try 'sudo ./$scriptname'"
        newline
        exit
    fi
}

apt_pkg_req() {
    APT_CHK=$(dpkg-query -W -f='${Status}\n' $1 2> /dev/null | grep "install ok installed")

    if [ "" == "$APT_CHK" ]; then
        true
    else
        false
    fi
}

apt_pkg_install() {
    \curl -sS get.pimoroni.com/package | bash -s - $1 || { warning "Sorry, Apt failed to install $1, I can't continue!" && exit; }
}

pip_pkg_req() {
    PIP_CHK=$(pip search $1 | grep INSTALLED)

    if [ "" == "$PIP_CHK" ]; then
        true
    else
        false
    fi
}

pip_chk_pip3() {
    if command -v pip3 > /dev/null; then
        PIP3_BIN="pip3"
    elif command -v pip-3.2 > /dev/null; then
        PIP3_BIN="pip-3.2"
    else
        PIP3_BIN=""
    fi
}

pip_pkg_req3() {
    PIP_CHK=$($PIP3_BIN search $1 | grep INSTALLED)

    if [ "" == "$PIP_CHK" ]; then
        true
    else
        false
    fi
}

os_check() {
    IS_RASPBIAN=false
    IS_MACOSX=false
    IS_X86_64=false
    IS_X86_32=false

    if [ -f /etc/os-release ] && cat /etc/os-release | grep "Raspbian" > /dev/null; then
        IS_RASPBIAN=true
    elif uname -s | grep "Darwin" > /dev/null; then
        IS_MACOSX=true
    elif uname -m | grep "x86_64" > /dev/null; then
        IS_X86_64=true
    else
        IS_X86_32=true
    fi
}

: <<'MAINSTART'

Perform all global variables declarations as well as function definition
above this section for clarity, thanks!

MAINSTART

os_check
sudocheck
pip_chk_pip3

newline
echo "This script will install everything needed to use"
echo "$productname"
newline
warning "--- Warning ---"
newline
echo "Always be careful when running scripts and commands"
echo "copied from the internet. Ensure they are from a"
echo "trusted source."
newline

if confirm "Do you wish to continue?"; then

    if command -v apt-get > /dev/null; then
    
        for pkgrm in ${pkgaptremove[@]}; do
            sudo apt-get remove "$pkgrm"
        done

        for pkgdep in ${pkgdeplist7[@]}; do
            if apt_pkg_req "$pkgdep"; then
                UPDATE_DB=true
            fi
        done
        for pkgdep in ${pkgdeplist8[@]}; do
            if apt_pkg_req "$pkgdep"; then
                UPDATE_DB=true
            fi
        done
        for morepkgdep in ${moreaptdep[@]}; do
            if apt_pkg_req "$morepkgdep"; then
                UPDATE_DB=true
            fi
        done 

        if $UPDATE_DB; then
            newline
            echo "Updating package indexes..."
            sysupdate

            newline
            echo "Checking for dependencies..."

            for pkgdep in ${pkgdeplist7[@]}; do
                if apt_pkg_req "$pkgdep"; then
                    apt_pkg_install "$pkgdep"
                fi
            done

            if ! raspbian_old; then
                for pkgdep in ${pkgdeplist8[@]}; do
                    if apt_pkg_req "$pkgdep"; then
                        apt_pkg_install "$pkgdep"
                    fi
                done
            fi
        else
            success "Found!"
        fi
    fi

    if [ $pip2support == "yes" ] && command -v pip > /dev/null; then
        for libdep in ${piplibdep[@]}; do
            echo "Installing "$libdep" for Python 2.x..."
            sudo pip install "$libdep"
        done
    fi

    if [ $pip3support == "yes" ] && [ -n "$PIP3_BIN" ]; then
        for libdep in ${piplibdep[@]}; do
            echo "Installing "$libdep" for Python 3.x..."
            sudo $PIP3_BIN install "$libdep"
        done
    fi

    echo "Installing $piplibname library..."
    newline
    cd ./library

    echo $(which python2)
    echo $(which python3)

    if [ $pip2support == "yes" ] && [ -n $(which python2) ]; then
        sudo python ./setup.py install
    fi
    if [ $pip3support == "yes" ] && [ -n $(which python3) ]; then
        sudo python3 ./setup.py install
    fi

    newline
    echo "We will now check that your dock is running the latest firmware"
    newline
    cd ../firmware
    sudo ./update_firmware

    echo "All done! Time to set sail."
    newline
else
    newline
    echo "Aborting..."
    newline
fi

exit 0
